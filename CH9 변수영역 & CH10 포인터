#include <stdio.h>

void CallNumber(); ///함수를 선언해준다. 

int main(void)

{

	int value = 10;

	int i ;

	for(i=0;i<5;i++)

		CallNumber();

	return 0;

}

// for 문을 이용하여 CallNumber 함수를 5번 반복시행한다. 

 

void CallNumber()  // CallNumber 함수를 정의한다. 

{

	static int count =1;

	int number = 1;

	printf("%d-th call \n",count++);

	printf("number=%d\n",number++);

}

 이 프로그램은 내부 정적 변수를 이용해 함수가 나온 횟수를 나타내는 프로그램이다.

 count는 void CallNumber()함수에서 1에서 시작해 계속 1씩 더해지는 내부 정적 변수라서 void CallNumber()함수가 종료되어도 변수가 사라지지 않고 계속 보존되기 때문에 함수가 몇 번 나왔는 지 확인할 수 있다. 
반면 number은 void CallNumber()함수에서 1에서 시작해 계속 1씩 더해지지만 내부 정적 변수가 아닌 void CallNumber()함수 내의 지역 변수이므로 main()함수의 for문에 의해 반복시행 되어도 변수 값이 사라져 계속 1로 초기화되기 때문에 number=1로 계속 같은 값이 출력된다. 

[실행결과]

number=1
2-th call
number=1
3-th call
number=1
4-th call
number=1
5-th call
number=1
이 시행된다.





include <stdio.h>
*/int main(void)
{
int a[]={1,2,3,4,5} ;
int *pA = a ; // &기호를 빼야한다.
int i ;
for(i=0; i<5; i++)
printf("a[%d] = %p \n" ,i,pA[i]);

//&d를 %p로 바꾸고 변수값 pA가 아니라 pA[i]라고 둬야한다.

return 0 ;
}
*\

 이 프로그램은 포인터를 이용해 배열 a의 원소를 출력하는 프로그램이다. 
우선 배열 a를 선언하고, 포인터를 이용해 pA에 배열 a를 저장한다. 저장할 때 int *pA=a;로 선언을 해야 a의 원소들이 pA에 저장된다.(만약, int pA=a;로 저장한다면 배열 a의 각 원소들의 주소가 pA에 저장될 것이다.)
 이 후 출력함수와 for문을 이용해 배열 a의 원소를 포인터를 이용해 출력한다.

[프로그램 실행결과]
a[0]=1
a[1]=2
a[2]=3
a[3]=4
a[4]=5

*/
int main(void)
{
char *pAry[][5] = {“On” , “Off”, “Stay”};
int i;
for(i=0 ; i<3 ; i++)
printf(“%s \n” , pAry[i]);
return 0;
}

for문에서 변수을 i로 잡았으니 a++가 아니라 i++로 고쳐야 한다. a는 이 예제 어느 부분에도 선언되어 있지 않다.

이 프로그램은 포인터와 배열을 사용해 문자열을 출력하는 프로그램이다
포인터 배열 pAray[][5]를 선언한다. 그 다음 for문을 이용해 pAry[]의 문자열이 3개이므로 I가 0~3 까지 printf()를 통해  pAry[i]로 문자열 On, Off, Stay를 출력하도록 한다. 

그리고 출력문에서 pAry++i를 pAry[i]로 고쳐야 한다. pAry는 배열로 선언된 변수이다.(숫자가 아님)

{실행결과}
On
Off
Stay
출력

실습 ch.9 & ch.10_3

void sort(int x[],int n);
double avg (int x[],int n);
void minmax(int x[] , int n, int *minx, int *maxx );

int main(void)
{
int a[12] = {1,5,-10,3,6,9,10,23,5,7,-25,4};
int b[12] = {6,4,-3,6,9,2,1,10,-7,20,13,8};
int n=12, j;
int maxa, mina, maxb,minb ;
double avga, avgb ; 

sort(a,n);
sort(b,n);
minmax(a,n,&mina,&maxa);
minmax(b,n,&minb,&maxb);
avga=avg(a,n);
avgb=avg(b,n);

for(j=0; j<n; j++)
printf("a[%2d]=%3d, b[%2d]=%3d \n", j, a[j],j,b[j]);
printf(" \n maxa= %2d, mina=%2d\n maxb=%2d, minb=%2d \n",maxa,mina,maxb,minb);
printf("avga=%3.1lf, avgb= %3.1lf \n",avga,avgb);
return 0;
}

void sort(int x[],int n) //// a의 원소들을 오름차순 하는 함수를 정의한다. 
{
int i,j;
int temp ;


for(i=0;i<12 ; i++)
{
for(j=0; j<11; j++)
{
if(x[j]>x[j+1])
{ temp = x[j+1];
x[j+1] = x[j];
x[j]=temp ;
}
}
}
}


sort 함수는 
먼저 변수 i와 j, 임시값 temp를 선언해준다

만약 원소값 중 앞번호의 원소 값이 바로 뒷번호의 원소값보다 크다면 임시값 temp에 x[j+1]라는 값을부여하고 x[j+1]와 x[j]에 값들의 순서를 서로 뒤바꾸어준다.
이과정을 반복하다보면 내림차순 배열이 될 것이다.

double avg (int x[],int n)
{
double avg, sum=0;
int r ;
for(r=0; r<n ; r++)
{
sum+=(double)x[r] ;
}
(double)avg = (double)sum/(double)n;
return avg ;

}

// 
avg함수는 

원소들의 평균값을 구하는 함수이다.
평균을 구하기 위해서는 원소합을 원소갯수로 나눠야한다.

원소들을 더하는 for문을 작성한 뒤에
그 값인 sum을 원소갯수인으로 나눠주고 평균값 avg을 리턴받는다.
여기서 결과가 정수가 아니므로 double로 변환을 해줘야한다.


void minmax(int x[] , int n, int *minx, int *maxx)
{
int i ;
for( i=0 ; i<n ; i++)
{
if(i==0)
*maxx=x[0];
else if(*maxx<=x[i])
*maxx=x[i];
}

for(i=0 ; i<n ; i++)
{
if(i==0)
*minx=x[0];
else if(*minx>=x[i])
*minx=x[i];
}

///minmax함수는 
원소의 최소최대값을 구하는 함수이다.

만약 원소의 갯수가 단 1개 x[0] 뿐이라면 최대와 최소값은 그것 뿐일 것이다.

그것이 아니라면 최댓값 max x가 어떤 값 x[i]보다 작거나 같다면 결국 x[i]값이 최댓값이고 최솟값 min x가 x[i]보다 크거나 같다면 그 값이 최솟값이 된다.
}

{프로그램 실행결과}

a[0]=-25, b[0]=-7
a[1]=-10, b[1]=-3
a[2]=1, b[2]=1
a[3]=3, b[3]=2
a[4]=4, b[4]=4
a[5]=5, b[5]=6
a[6]=5, b[6]=6
a[7]=6, b[7]=8
a[8]=7, b[8]=9
a[9]=9, b[9]=10
a[10]=10, b[10]=13
a[11]=23, b[11]=20

maxa=23, mina=-25
maxb=20, minb=-7
avga=3.2, avgb=5.8



3. 수업과 실습을 통해서 알게 된 내용

저번시간에 배웠던 함수에 대해 한층 더 견고하게 이해할 수 있게 되었다. 이번 예제에서 사소한 시행착오를 통해 함수 선언을 프로그램 맨 앞부분에 해주어야 해야한다는 점을 짚고 갈 수 있었다.

그리고 포인터와 배열 관계에 대해 배울 수 있었다.

포인터 선언방법은 

자료형*변수명 ; 의 방식으로 선언해준다. 

(포인터 변수는 메모리의 위치를 가리킨다.)

포인터를 사용하면 변수명을 통하지 않고도 사용하고자 하는 대상에 직접 접근할 수  있어 프로그램이 간결하고 효율적으로 제어된다. 

포인터와 배열명에서 증감연산자의 의미

p++는 포인터 p가 가리키는 곳의 다음주소를 의미한다.
*p++는 포인터 p가 가리키는 곳의 다음 주소 안에 있는 값을 의미한다.
a++ : 배열 명 a는 상수이므로 증감 연산자를 이용할 수 없다.(a가 상수인경우)

배열의 합을 구할 때 

pA[i]와 *(pA+i), *pA++는 같은 의미이다. 

*pA++는 *보다 ++연산자의 우선순위가 빨라 원소값을 나타낼 수 있다. 

{*pA)++는 pA가 가리키는 곳의 값을 연산 후에 1만큼 증가시킨다는 의미이다. 

문자열을 표현할 때는 char를 이용하여 표현해준다.

