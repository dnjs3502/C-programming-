실습 CH11_1 (프로그램 수정)

#include<stdio.h>
struct books
{ char *title;
char *author;
int page;
float price;};
typedef struct books book;
int main()
{
book ac = {"auto control","dorf",725,99.5};
printf("제목:%s, 저자:%s, 쪽수:%4d, 가격:%4.1f\n", ac.titlㄱe, ac.author, ac.page, ac.price);

return 0;
}

<프로그램 설명>

구조체를 선언할 때 문자를 선언한다면 *를 붙여줘야 한다. 

그리고 price 변수를 선언할 때 정수형이 아니므로 int에서 float로 변경해준다. 

그리고 구조체 객체를 선언할 때 문자를 작성할 때는 ‘이 아니라 “를 써줘야 한다. 또, 출력문에서 %s로 해줘야한다.    







실습 CH11_3
#include <stdio.h>
 
#include<math.h>
 
#define N 5
 
typedef struct
 
{
 
	double x; double y; double z; double theta; 
 
}  triangle;
 
void find_z_theta(triangle* delta);
void find_length(double* len, int* max);
 
 
 
int main(void)
 
{
 
	triangle delta[N];
 
	triangle dmax;
 
	double len[N];
 
	int  k,n;
 
	for(n=0;n<N;n++)          
 
	{ 
 
		delta[n].x=(double)(n+1);
 
		delta[n].y=3.0/(double)(n+1);
 
		find_z_theta( &delta[n]);
 
		len[n] = delta[n].x + delta[n].y + delta[n].z;	
 
 
		printf("delta[%d](x,y,z,theta,len)=%.1lf,%.1lf,%.1lf,%.1lf,%.1lf \n",n,delta[n].x,delta[n].y, delta[n].z, delta[n].theta, len[n]);
	}
 
	find_length(len, &k);
 
	printf("dmax = delta[%d].x = %.1lf y=%.1lf z=%.1lf theta=%.1lf, len=%.1f \n", k, delta[k].x, delta[k].y, delta[k].z, delta[k].theta, len[k]);
 
	return 0;
}
 
 
void find_z_theta(triangle* delta) // z와 theta 값을 구하는 함수를 정의한다. 
{
 
	(delta->z)=sqrt((delta->x)*(delta->x)+(delta->y)*(delta->y));
 
 
 
	(delta->theta)= atan((delta->y)/(delta->x))*180/3.14;

 
}
 
void find_length(double* len, int* max) // 최대 length를 판별하는 함수를 정의한다. 
{
	int i, kmax;
	kmax = len[0];
	*max = 0;
	for (i = 0; i <= 4; i++)
	{
		if(len[i] >= kmax) {
			*max = i;
		}
		else {
			// 기존 max값 유지 
		
		}
	}
}


< 프로그램 설명>

int main(void) 메인 함수 설명 

조건에서 주어진 x와 y를 정의하는 식을 제외하고 z와 세타는 밑에서 설명할 find_z_theta 함수를 활용한다. 그리고 length는 그렇게 구한 x,y,z값을 더해주는 식으로 정의한다. 

그리고 printf문을 통해서 앞에서 구한 변수를 집어넣어 출력해준다. 


void find_z_theta(triangle* delta) 설명 

함수의 인자를 전달할 때 메모리 이동이 크다. 그렇기 때문에 포인터를 이용하여 주소를 전달하는 방식을 이용하였다. 

나머지는 단순 산수이다. ( 사칙연산 ,탄젠트 개념 등등..)


void find_length(double* len, int* max) 설명 
length를 불러온 다음, for문과 if문을 통해 판별하는 과정을 거친다. 

kmax = len[0];
*max = 0;   
초기에 최댓값을 len[0]으로 지정해준다. 

그 다음 if문을 이용해서  len[0]부터 len[4]까지 값들을 비교해준다. 















실습 CH11_2 

#include<stdio.h>
 
#define N 5
struct triangle {
	int nr; 
	double w,h,a;
} ;
 
typedef struct triangle triangle ;
 
void calculate_area(triangle* delta);  

void find_minmax(triangle* delta, int *kmin ,int *kmax);
 
//함수 정의 
 
int main(void)
{
 
	struct triangle delta[N];  
 
	int kmin,kmax ;
	int j ;
 
	delta[0].nr = 0;    delta[0].w = 10.0;     delta[0].h = 5.6;
	delta[1].nr = 1;   delta[1].w= 11.0;      delta[1].h = 39.3 ; 
	delta[2].nr = 2;   delta[2].w=12.0;       delta[2].h=6,3;
	delta[3].nr = 3;   delta[3].w=9.0;        delta[3].h=5.6;
	delta[4].nr = 4;   delta[4].w=10.0;      delta[4].h=7.1;
 
 
 
	for(j=0;j<5;j++)
	{
	calculate_area(&delta[j]);  ////계산함수 
 
	printf("delta[%d](w,h,a)= %.1lf, %.1lf,%.3lf \n",delta[j].nr, delta[j].w,delta[j].h,delta[j].a);
 
	};
 
 
find_minmax(delta, &kmin, &kmax);
 
 
	printf(" min area = delta[%d] = %.1lf \n", kmin, delta[kmin].a); 
	printf(" max area = delta[%d] = %.1lf \n", kmax, delta[kmax].a); 
 
	return 0;
}
 
void calculate_area(triangle* delta)
{
	int i ; 
 
    for(i=0; i<5 ; i++)
	{
		delta[i].a=(delta[i].w*delta[i].h)/2 ; 
 
	}
}
 
void find_minmax(triangle* delta, int* min, int *max) //// 넓이 최대최소 판별 함수 
{
 
 
int j,kmax,kmin;
kmax = delta[0].a;
kmin = delta[0].a;
for(j=1;j<4;j++){
	if(delta[j].a>=kmax){
		*max = delta[j].nr;
		// delta[j].nr =*max ; 
 
 
	}
	else{ 
		*max = delta[j+1].nr;
		// delta[j+1].nr = *max ;
 
	}
}
 
for(j=1;j<4;j++){
	if(delta[j].a<=kmin){
		*min = delta[j].nr;
		// delta[j].nr = *min ; 
	}
	else{ 
		*min = delta[j].nr;
		// delta[j+1].nr = *min ;
	}
}
 
 
 
 
}


<프로그램 설명>


맨 처음 typedef struct를 통해 구조체를 선언해준다.

int main(void) 설명 

예제에서 주어진 w,h값을 delta[].nr에 따라 일일이 선언해준다. 

그다음 for문을 통해 0~4까지의 delta 값들이 출력되도록한다. 

(면적값은 밑의 caclulate 함수를 호출한다.) 

그 후 면적의 최대, 최소 값을 나타내기 위해 minmax를 호출 해준뒤 출력해준다. 


void calculate_area(triangle* delta) 함수 설명 

단순 삼각형 넓이를 구하는 식을 작성하고 for문을 통해 delta[0]~ delta[4]까지 구해주도록 한다. 

void find_minmax(triangle* delta, int* min, int *max) 설명 

max와 min을 구하는 방식은 부등호 방향만 차이나므로 max를 예로 들어 설명해보자면 
kmax = delta[0].a; 
맨 처음 최댓값을 가지는 delta[x].a(넓이)를 x=0 의 값으로 정의해준다 그 다음 
for문과 if문을 돌려 차근차근 값을 비교해나간다. 

void calculate_area(triangle* delta) 함수 설명 

단순 삼각형 넓이를 구하는 식을 작성하고 for문을 통해 I= 0~ I=4까지 구해주도록 한다. 







