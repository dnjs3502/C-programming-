<실습 목표> 

C프로그래밍의 기초적인 세팅(#include <stdio.h>, int main)등에 대해 익히고 
챕터 2 <기본 자료형과 형 변환>에서 상수와 변수, 특히 기본 자료형 - 정수형,실수형,문자형에 따라 각자 다른 명령어를 사용함에 유의한다. 
마지막으로 이를 응용하여 형 변환에 대해 공부해본다. 

<프로그램 설명> 

주어진 예제를 이용하여 기본 자료형과 형 변환 챕터를 좀더 실용적으로 익혀본다. 

CH1_1 : 주어진 문자를 모니터에 출력하는 것이 예제의 목표인데 printf 명령어를 이용하면 간단하게 해결할 수 있다. 하지만 여기서 * 문자를 빼놓지 않고 줄을 맞춰서 네모 카드 모양을 완성함에 유의해야 한다. 

CH2_1 : 주어진 프로그램을 적절하게 수정해서 합, 차 와 같은 연산을 모니터에 출력하는 것이 목표이다. (A= 100+200 = 300
     B= 100 - 1 = 99)

예제 2번에서는 정수형 코드를 사용해야 하며, 자릿수를 올바르게 나타날 수 있도록 함에 유의해야 한다. 주어진 프로그램에서는 a의 값만 주어져 있기 때문에, b,A,B의 값을 목표 출력 값에 맞게 설정해주면 될 것이다. (int a= 100, b=200, A=300, B=99, c;)

또한 printf에 출력되어지는 것을 입력할 때 정수형이므로 %d를 사용해야 한다.  그리고 ,뒤에 사용되는 선언된 문자를 입력해 주어야 한다. (/n" , a,b,A)

마지막으로 c=sizeof(k) 부분은 자료형의 크기를 확인할 수 있게 해주는 것인데, int같은 자료형의 이름에서는 거의 필수적으로 쓰인다. 

CH2_2 :  주어진 프로그램의 오류를 수정하여 알맞은 결과를 보이는 것이 목표이다.

길이를 length 높이를 height라고 입력하였을 때, 주어진 height 값은 정수이지만 주어진 length 값이 실수이므로 height는  int가 아니라 float를 이용하여 선언해주어야 한다. (float length = 5.56;)

면적을 area라 했을 때 면적은 length * length 이므로 printf를 쓰기 전에 위에 area = length*length 라고 지정을 해준다. 

하지만 부피는 area*height로 정의되므로 area*height라고 고쳐주어야 맞는 표현이다. 






CH2_3

  : CH2_3의 목표는 printf함수와 변환기호를 사용하여 주어진 내용을 출력하는 코드를 작성하는 것이다. 

출력 내용 : 1. 소문자 f의 ASCII 값은 102이다.
           2. ASCII 76은 L이다. 

이 예제는 printf, 변환기호를 적절하게 사용하는 것이 다이기 때문에 쉬운 예제이나 아스키코드에 대한 이해가 없으면 어렵게 느껴질 수 있다. 

1번의 아스키 값은 정수이기 때문에 코드를 입력해보면 

printf("소문자 f의 ASCII 값은 %d이다. /n" , 'f');

여기서 아스키 코드표를 참고하여 문장 “,” 옆에 ,를 붙여 ‘f'를 입력해줘야함에 유의해야한다. 


2번의 내용은 주어진 숫자에 대응되는 문자를 내놓아야 한다. 

printf("ASCII 76은 %c이다. /n" , 76); 

여기서 아스키코드표를 참조하여 %c 와 ,76을 입력해야 함에 유의해야 한다. 


실습 ch2_4

임의의 실수 값 선언과 명시적 형 변환을 사용하여 임의의 값 a의 정수 부분과 소수부분을 출력하는 프로그램을 짜는 것이 목표이다. 

임의의 실수값을 10.567이라 하면 

a의 정수부분 = 10
a의 소수부분 = 0.567 

이것이 모니터에 출력되어야 한다. 

그러므로 float 함수를 이용하여 a를 선언해주고 
printf에서 문자를 써넣을 때 문장 뒤에 정수부분은 (int)a, 이라해주고 소수부분은 (float)a-10 이런식으로 명시적 형 변환을 해주어야 알맞게 나올 것이다. 


<실습을 통해서 알게 된 내용>

아스키코드 표를 참고하여 프로그램을 작성해야하는  ch2_3이 나에게 복잡하게 다가왔다. 
교재에 비슷한 예제가 있었으나 조금 달라서 그런 거 인 걸 수도 있다. 
또한 형 변환 부분에 대한 개념을 책으로만 읽었을 때는 무슨 말인지 이해를 하기 힘들었으나 실습을 통해 
직접 작성해보고 나중에 작성한 코드를 천천히 들여다보니 쉽게 이해를 할 수 있었다. 
