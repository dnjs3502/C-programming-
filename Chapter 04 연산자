
실습 CH4_1 : 제시된 프로그램의 결과를 예측해보고 프로그램을 실행하여 결과를 확인하는 예제이다. 
프로그램에서 주요 부분을 살펴보자. 
int a, b, d;
a=5; b=10;
a = b++ >> a에 b값대입후 b에 +1
d = ++a a에 +1하고 d에 대입 
printf(" a= %d, b= %d, d= %d \n", a,b,d); >>> 이부분에서는 a=10, b=11, d=11이란 것을 알 수 있다. 
a = b + ++d; a값 = b +ｄ값에 1을 더한 값 b값 = 변함x d값 = 원래값 +1
printf(" a= %d, b= %d, d= %d \n", a,b,d);  >>> a= 23 b= 12, d=11

실습CH4_2

주어진 프로그램을 실행하고 a1값과 a2값의 차이점을 설명하는 예제이다.

우선 주어진 프로그램을 살펴보자.

#include <stdio.h>

int main(void)
{
  int lastmask = 1;
  int firstmask = 128;
  int a, a1, a2;

 printf("255이하의 정수 a를 입력하시오. \n");
 scanf("%d", &a);
 printf("정수 %d의 HEX는 %x이다. \n" , a, a); >> 정수를 입력받은후 16진수로 나타낸다 
 a1 = a & firstmask
 printf(“%x의 첫 번째 비트는 %d이다. \n", a,a1);
 a2 = a1>>7
 printf(“%x의 첫 번째 비트는 %d이다. \n", a,a2);
 printf(“%x의 마지막 비트는 %d이다. \n", a,a & lastmask);
return 0 ;
}
first mask는 입력한 정수를 이진수를 나타냈을 때 추출한 비트에서 맨 앞 부분을 나타내는 것이고, lastmask는 제일 마지막 부분을 나타낸다는 것이다. 
그러므로 a1은 입력한 숫자에서 첫비트만 추출한 것이다. 
a2는 추출한 첫 비트에서 오른쪽으로 7칸 이동하므로 결국 끝 비트로 옮겨져 표시한다.


CH 4_3 

정수 3개를 입력받아 합을 계산하고 합>100 이면 합격 아니면 불합격을 출력하는 예제이다. 

주요 부분만 살펴보자. 

int a, b, c = 0;
int sum ;
printf("수들을 입력하십시오. \n" );
scanf(" %d, %d, %d" , &a, &b, &c);
>>>>>입력받을 정수 a,b,c와 이들의 합계를 선언해주고 입출력함수를 활용한다. 
sum = a+b+c ; 

if (sum >　１００）；
 printf("합격 \n", sum);

else
 printf(“불합격 \n", sum); if 함수를 이용하여 수들의 합계의 값에 따라 합격, 불합격을 출력하도록 선언해준다. 


CH4_4 2개 실수 a,b를 입력받아 1~8의 결과를 나타내는 프로그램을 작성해보는 예제이다. 

1. a,b가 범위만족하는지 확인 후 만족하지 않으면 종료
2. a,b를 정수형 n,m으로 변환 후 출력
3. n,m의 나눗셈 결과를 십진수 (몫과 나머지)로 출력 

float a,b ; 
int n,m div1, div2 ; 

  printf("수를 입력하십시오. \n");
scanf(" %f, %f , &a, &b);

if ((a>=1&&a<=256)&&(b>=1&&b<=256) >>＆＆표현을 하여 그리고 조건을 나타내 준다. 
     printf(" a의 정수형 = %d, b의 정수형 = %d \n" , (int)a, (int)b);
else
 return 0;  >>if 함수를 이용하여 조건에 벗어나면 종료한다. 

n=(int) a ;   >>n과 m을 새로 선언해주는 것이 편리하므로 선언해준다. 
m=(int) b ;

div1 = n/m ; >>n나누기 m의 몫 표현 

div2 = n%m; >> n나누기m의 나머지 표현 

printf("n과 m의 나눗셈의 몫 = %d, 나머지 = %d \n " , div1, div2)

4. n,m 각각 16진수 g,h로 변환 후 력

printf(" %x ,%x \n " , n,m);

n,m을 %x를 이용해 16진수로 출력해준다. 

5. g xor h 연산 결과를 HEX로 출력
6. g or h 연산 결과를 hex로 출력

printf("g xor h 연산결과 = %x \n " , nxorm);

printf("g or h 연산결과 = %x \n " , n or m); 

>> g,h는 n,m을 16진수로 표현 한것이기 때문에 n과 m을 각각 xor, or 연산해주어 표현한다. 

7. g bitwise-AND 0xf0 연산결과를 HEX로 출력
8. 위 결과에서 hex의 왼쪽 숫자만 출력 

printf("g bitewise-And 0xf0 연산결과 = %x<<4 \n " . n and 0xf0);

>> 위 연산결과에서 오른쪽으로 4칸을 이동시켜주면 왼쪽숫자가 오른쪽으로 이동하면서 오른쪽에 있던 값이 밀려나게 되고 왼쪽결과만 출력되게 된다. 

