
#include<stdio.h>

 

 

void Bubble_Sort(int*a, int count);

 

int main(void)

{

int data[10] = {4,2,3,8,1,5,10,9,6,7};

 

int i;

 

Bubble_Sort(data,10);

 

for(i=0; i<10; i++)

 

	printf("%d \n", data[i]);

 

return 0 ; 

}

 

void Bubble_Sort(int*a, int count)

{

	int i,j;

	int temp ; 

 

	for(i=0;i<count-1; i++)

	{

		for(j=1; j<count-i; j++)

		{

		  if(a[j-1]<a[j])

		   {

			temp=a[j];

			a[j] = a[j-1];

			a[j-1]=temp;

		    }

		}

	}

 

		

	

}

 

 

 

/*

 

 

#include <stdio.h>

#include <stdlib.h>    // qsort 함수가 선언된 헤더 파일

 

int compare(const void *a, const void *b)    // 오름차순 비교 함수 구현

{

    int num1 = *(int *)a;    // void 포인터를 int 포인터로 변환한 뒤 역참조하여 값을 가져옴

    int num2 = *(int *)b;    // void 포인터를 int 포인터로 변환한 뒤 역참조하여 값을 가져옴

 

    if (num1 < num2)    // a가 b보다 작을 때는

        return -1;      // -1 반환

    

    if (num1 > num2)    // a가 b보다 클 때는

        return 1;       // 1 반환

    

    return 0;    // a와 b가 같을 때는 0 반환

}

 

int main()

{

    int numArr[10] = {4,2,3,8,1,5,10,9,6,7};   // 정렬되지 않은 배열

 

    // 정렬할 배열, 요소 개수, 요소 크기, 비교 함수를 넣어줌

    qsort(numArr, sizeof(numArr) / sizeof(int), sizeof(int), compare);

 

    for (int i = 0; i < 10; i++)

    {

        printf("%d ", numArr[i]);    // 1 2 3 4 5 6 7 8 9 10

    }

 

    printf("\n");

 

    return 0;

}

 

 

 

#include <stdio.h>                                                   

#include <stdlib.h>                                                  

 

#define SIZE 256*256                                                 

typedef unsigned char BYTE;                                          

void main()                                                          

{                                                                    

	int i, j;                                                     

	FILE* fpIn, *fpOut;                                           

	BYTE* pBufIn = (BYTE*)malloc(SIZE);                           

	BYTE* pBufOut = (BYTE*)malloc(SIZE);                          

	fpIn = fopen("lena256.raw", "rb");                            

	fpOut = fopen("lenainvert256.raw", "wb");                     

	fread(pBufIn, 1, SIZE, fpIn);                                 

	

	for(i=0; i<256; i++)

	{                                 

		for(j=0; j<256; j++)

		{   

			pBufOut[i*256 + j] = 255 - pBufIn[i*256 + j];         

		}

	}

                                                            

	fwrite(pBufOut, 1, SIZE, fpOut);                              

	fclose(fpIn);                                                 

	fclose(fpOut);                                                

	free(pBufIn);                                                 

	free(pBufOut);                                                

}                              

 

 

 

#include <stdio.h>                               

#include <stdlib.h>                              

 

#define SIZE 256*256                             

typedef unsigned char BYTE;                                                                    

void main()                                      

{                                                

   int i, j;                                     

   FILE* fpIn, *fpOut;                           

   BYTE* pBufIn = (BYTE*)malloc(SIZE);           

   BYTE* pBufOut = (BYTE*)malloc(SIZE);          

   fpIn = fopen("lena256.raw", "rb");            

   fpOut = fopen("lenabynary256.raw", "wb");     

   fread(pBufIn, 1, SIZE, fpIn);                 

                                                 

   for(i=0; i<256; i++)                  

   {                                             

      for(j=0; j<256; j++)                

      {                                          

	     if(pBufIn[i*256 + j] >= 128)             

	          pBufOut[i*256 + j] = 255;             

     	 else                                     

	          pBufOut[i*256 + j] = 0;               

      }                                          

   }                                             

                                                 

   fwrite(pBufOut, 1, SIZE, fpOut);              

   fclose(fpIn);                                 

   fclose(fpOut);                                

   free(pBufIn);                                 

   free(pBufOut);                                

}                                                

                                                 

	*/
